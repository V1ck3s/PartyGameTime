@page "/settings/account"
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using PartyGameTime.Core.Model
@using PartyGameTime.Core.Services.Notifications
@inject AccountManager AccountManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar _snackbar
@inject IDialogService DialogService
@inject NotificationManager NotificationManager;

<MudGrid Justify="Justify.Center" Class="mt-16">
    <MudItem xs="12">
        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Account</MudText>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="true">
            <MudForm @ref="formRef" @bind-IsValid="isValid">
                <MudGrid>
                        <MudItem xs="12">
                            <MudTextField T="string" Label="Username" Disabled="true" Text="@userName" Variant="Variant.Outlined"/>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField T="string" Label="Email" @bind-Value="@email" Variant="Variant.Outlined" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-left">
                            <MudLink OnClick="ChangePassword">Change password</MudLink>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-center">
                            <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8" OnClick="UpdateAccount">Validate</MudButton>
                        </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>



@code{

    private string userName = "";
    private string email = "";
    private bool isValid;
    private MudForm formRef;

    protected override async Task OnInitializedAsync()
    {
        userName = await AccountManager.GetCurrentUserUsername();
        email = await AccountManager.GetCurrentUserEmail();
        var test = new Notification();
        test.Content = "Ceci est un test !";
        test.Title = "Une notif";
        test.CreatedAt = DateTime.Now;
        
        NotificationManager.SendNotification(test);
    }
    
    private async Task UpdateAccount()
    {
        await formRef.Validate();
        if (!isValid)
        {
            return;
        }
        try
        {
            await AccountManager.SetCurrentUserEmail(email);
            await AccountManager.UpdateCurrentAccount();
            _snackbar.Add("Account infos changed successfully.", Severity.Success);
        }
        catch (Exception exception)
        {
            _snackbar.Add("Error :"+exception.Message, Severity.Error);
        }
    }

    private async Task ChangePassword()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        await DialogService.ShowAsync<ChangePasswordDialog>("Change password", options);
    }

}


@using System.Security.Claims
@inject AccountManager AccountManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar _snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="formRef" @bind-IsValid="formIsValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="currentPassword" T="string" Label="Current password" Placeholder="current password" InputType="InputType.Password" Variant="Variant.Outlined" Validation="new Func<string,Task<string>>(async x => await CheckPassword(x))"/>
                </MudItem>
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Info" Dense="true" Class="my-2">Please choose a password of at least 8 characters.</MudAlert>
                    <MudTextField @bind-Value="newPassword" T="string" Label="New password" Placeholder="new password" InputType="InputType.Password" Variant="Variant.Outlined" Validation="@(new Func<string, string>((x) => x.Length > 8 ? "":"8 characters minimum"))"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="confirmNewPassword" T="string" Label="Confirm new password" Placeholder="new password" InputType="InputType.Password" Validation="@(new Func<string, string>((x) => x.Equals(newPassword) ? "":"The passwords don't match"))" Variant="Variant.Outlined"/>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="@Color.Success" Variant="Variant.Filled" OnClick="UpdatePassword">Validate</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    void Cancel() => MudDialog.Cancel();

    private string currentPassword = "";
    private string newPassword = "";
    private string confirmNewPassword = "";
    private bool formIsValid;
    private MudForm formRef;

    protected override async Task OnInitializedAsync()
    {
        
    }
    private async Task UpdatePassword()
    {
        await formRef.Validate();
        if (!formIsValid)
        {
            return;
        }
        
        var result = await AccountManager.ChangePasswordCurrentUser(currentPassword, newPassword);
        if (result?.Succeeded is null or false)
        {
            _snackbar.Add("Errors : " + result.Errors.ToString(), Severity.Error);
        }
        else
        {
            _snackbar.Add("Password changed successfully.", Severity.Success);
        }
        
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task<string> CheckPassword(string password)
    {
        bool result = await AccountManager.CheckPasswordCurrentUser(password);
        if (result)
        {
            return null;
        }
        
        return "Invalid password";
    }
}
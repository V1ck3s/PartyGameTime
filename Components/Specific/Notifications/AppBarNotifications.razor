@using PartyGameTime.Core.Services.Notifications
@using PartyGameTime.Core.Model
@inject NotificationManager NotificationManager;

<MudBadge Color="Color.Secondary" Dot="true" Overlap="true" Visible="NotificationManager.NotificationsUnread()">
    <MudMenu Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight" PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
        <div class="d-flex justify-space-between align-center px-2">
            <MudText Typo="Typo.subtitle2">Notifications</MudText>
            <MudButton Disabled="@(NotificationManager.NotificationsUnread() == false)" OnClick="NotificationManager.MarkNotificationAllAsRead" StartIcon="@Icons.Material.Filled.DoneAll" Variant="Variant.Text" Color="Color.Primary" Class="ml-16 mr-n2">Mark as read</MudButton>
        </div>
        @if (NotificationManager.NotificationsUnread())
        {
            @foreach (var notification in NotificationManager.Notifications.Where(x=>x.Read == false).OrderByDescending(x=>x.CreatedAt))
            {
                <MudMenuItem Class="px-2 py-0 rounded" OnClick="(x) => OnClickOnNotification(x,notification)">
                    <MudText Typo="Typo.subtitle2">@notification.Title</MudText>
                    <MudText Typo="Typo.body2">@($"{notification.Content} • {notification.TimeSinceStr}")</MudText>
                </MudMenuItem>
                <MudDivider Class="my-2"/>
            }
        }
        else
        {
            <div class="d-flex justify-center align-center px-2 py-8 relative">
                <MudText Class="mud-text-secondary my-12">No new notifications</MudText>
            </div>
        }
    </MudMenu>
</MudBadge>

@code {
    protected override async Task OnInitializedAsync()
    {
        NotificationManager.OnNewNotification += (x) => Refresh();
        NotificationManager.OnNotificationRead += () => Refresh();
    }
    
    private void Refresh()
    {
        StateHasChanged();
    }
    
    private void OnClickOnNotification(MouseEventArgs e, Notification notification)
    {
        NotificationManager.MarkNotificationAsRead(notification);
        notification.OnClickAction?.Invoke();
        Refresh();
    }
}